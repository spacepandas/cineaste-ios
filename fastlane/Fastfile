fastlane_version '2.0.0'

ProjectName = 'Cineaste'
AppIdentifier = 'de.spacepandas.ios.cineaste'
Target_Folder_Name = 'build' 
DerivedDataPath = 'build/DerivedData'

Scheme = 'Cineaste App'
Scheme_UnitTests = 'UnitTests'
Scheme_SnapshotTests = 'SnapshotTests'
Scheme_UITests = 'UITests'

Test_Device = 'iPhone 8'
Test_Devices = [
  'iPhone SE (2nd generation)',
  'iPhone 8 Plus',
  'iPhone 11 Pro',
  'iPhone 11 Pro Max',
  'iPad Pro (9.7-inch)',
  'iPad Pro (11-inch) (2nd generation)',
  'iPad Pro (12.9-inch) (4th generation)'
]
Test_Language = 'en-US'
Test_Languages = [
  'en-US',
  'de-DE'
]

$version_number_to_set = '1.26.0'
$build_number_to_set = number_of_commits.to_s
$ipaName = "#{ProjectName}-#{$version_number_to_set}-#{$build_number_to_set}"

skip_docs

desc 'Run all unit tests'
lane :test do
  run_tests(
    code_coverage: true,
    device: Test_Device,
    scheme: Scheme_UnitTests
  )
end

desc 'Run all snapshot tests'
lane :snapshot_test do
  run_tests(
    device: Test_Device,
    scheme: Scheme_SnapshotTests
  )
end

desc 'Run all UI tests'
lane :ui_test do
  run_tests(
    device: Test_Device,
    scheme: Scheme_UITests
  )
end

desc 'Make screenshots of app for AppStore Connect'
lane :screenshots do
  run_tests(
    clean: true,
    build_for_testing: true,
    derived_data_path: DerivedDataPath,
    scheme: Scheme_UITests
  )

  capture_ios_screenshots(
    app_identifier: AppIdentifier,
    clear_previous_screenshots: true,
    configuration: 'Debug',
    derived_data_path: DerivedDataPath,
    devices: Test_Devices,
    languages: Test_Languages, 
    output_directory: "#{Target_Folder_Name}/screenshots",
    override_status_bar: true,
    scheme: Scheme_UITests,
    stop_after_first_error: true,
    test_without_building: true
    
# Enable the following launch arguments to test dynamic type 
# , launch_arguments: [
#   "-UIPreferredContentSizeCategoryName UICTContentSizeCategoryAccessibilityL",
#   "-UIPreferredContentSizeCategoryName UICTContentSizeCategoryL"
# ]

  )
end

# desc 'Make framed screenshots for one device'
# lane :frame do
#   capture_ios_screenshots(
#     app_identifier: AppIdentifier,
#     configuration: 'Debug',
#     devices: Test_Devices,
#     languages: [ Test_Language ],
#     output_directory: "#{Target_Folder_Name}/assets",
#     override_status_bar: true,
#     scheme: Scheme_UITests,
#     skip_open_summary: true,
#     stop_after_first_error: true
#   )
#   frame_screenshots(
#     path: "#{Target_Folder_Name}/assets"
#   )
# end

def buildApp
  time_string = Time.new.strftime('%Y.%m.%d')
  $ipaName = "#{$ipaName}-#{time_string}"

  build_ios_app(
    scheme: Scheme,
    output_name: $ipaName,
    output_directory: Target_Folder_Name
  )
end

desc 'Build the release app locally'
lane :build do
  buildApp
end

desc 'Update build + version number, commit changes and tag with version'
lane :release do 
  increment_build_number(
    build_number: $build_number_to_set
  )

  increment_version_number(
    version_number: $version_number_to_set
  )

  sh("git commit -a -m \"Release version #{$version_number_to_set}\"")

  add_git_tag(tag: $version_number_to_set)
end

desc 'Build and upload the release app to TestFlight'
lane :beta do 
  buildApp

  changelog = sh("cd .. && ./get-changelog-for-version.sh #{$version_number_to_set}")

  upload_to_testflight(
    changelog: changelog,
    distribute_external: true,
    groups: 'Spacepandas',
    ipa: "#{Target_Folder_Name}/#{$ipaName}.ipa",
    notify_external_testers: true,
    username: 'tech@spacepandas.de'
  )
end
